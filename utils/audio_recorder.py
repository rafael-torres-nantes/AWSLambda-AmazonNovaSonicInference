# utils/audio_recorder.py

import os
import pyaudio
import wave
import time
import asyncio
from dotenv import load_dotenv

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

class AudioRecorder:
    """
    Classe utilit√°ria para gravar √°udio do microfone e salvar em um arquivo .wav.
    """

    def __init__(self):
        """
        Inicializa o gravador de √°udio com configura√ß√µes padr√£o.
        Estas configura√ß√µes s√£o otimizadas para o Amazon Nova Sonic.
        """
        # Configura√ß√µes do √°udio
        self.format = pyaudio.paInt16  # Formato dos samples (16 bits)
        self.channels = 1  # Mono
        self.rate = 16000  # Taxa de amostragem em Hz (16kHz √© ideal para o Sonic)
        self.chunk_size = 1024  # Tamanho do buffer de leitura
        
        # Diret√≥rio de sa√≠da para os arquivos gravados
        # Pega do .env ou usa './tmp/' como padr√£o
        self.output_dir = os.getenv('OUTPUT_DIR', './tmp/')
        
        # Garante que o diret√≥rio de sa√≠da exista
        os.makedirs(self.output_dir, exist_ok=True)

        print(f"[DEBUG][RECORDER] Gravador de √°udio inicializado.")
        print(f"[DEBUG][RECORDER] √Åudios ser√£o salvos em: {self.output_dir}")

    async def record(self) -> str:
        """
        Grava o √°udio do microfone at√© que o usu√°rio pressione Enter.

        Returns:
            str: O caminho completo para o arquivo de √°udio .wav salvo.
        """
        # Inicializa o PyAudio
        p = pyaudio.PyAudio()

        # Abre o stream de √°udio para grava√ß√£o
        stream = p.open(format=self.format,
                        channels=self.channels,
                        rate=self.rate,
                        input=True,
                        frames_per_buffer=self.chunk_size)

        print("\nüé§ [INFO] Gravando... Pressione a tecla Enter para parar.")

        frames = []
        is_recording = True

        # --- Loop de grava√ß√£o ---
        # A grava√ß√£o ocorre em um loop, lendo chunks de √°udio do microfone.
        # A verifica√ß√£o da tecla Enter √© feita em uma tarefa separada para n√£o bloquear a grava√ß√£o.
        
        # Fun√ß√£o para aguardar o Enter do usu√°rio de forma ass√≠ncrona
        async def wait_for_enter():
            nonlocal is_recording
            await asyncio.get_event_loop().run_in_executor(None, input)
            is_recording = False

        # Inicia a tarefa que espera pelo Enter
        enter_task = asyncio.create_task(wait_for_enter())

        while is_recording:
            try:
                # L√™ um chunk de dados do microfone
                data = stream.read(self.chunk_size)
                frames.append(data)
                # Uma pequena pausa para permitir que outras tarefas (como a verifica√ß√£o do Enter) rodem
                await asyncio.sleep(0.01)
            except KeyboardInterrupt:
                # Permite parar com Ctrl+C tamb√©m
                is_recording = False

        await enter_task

        print("üî¥ [INFO] Grava√ß√£o finalizada. Salvando arquivo...")

        # --- Finaliza√ß√£o e salvamento ---
        # Para e fecha o stream de √°udio
        stream.stop_stream()
        stream.close()
        # Encerra a inst√¢ncia do PyAudio
        p.terminate()

        # Gera um nome de arquivo √∫nico com timestamp
        timestamp = int(time.time())
        filename = f"recording_{timestamp}.wav"
        file_path = os.path.join(self.output_dir, filename)

        # Abre o arquivo .wav no modo de escrita bin√°ria
        with wave.open(file_path, 'wb') as wf:
            wf.setnchannels(self.channels)
            wf.setsampwidth(p.get_sample_size(self.format))
            wf.setframerate(self.rate)
            # Escreve todos os frames gravados no arquivo
            wf.writeframes(b''.join(frames))

        print(f"‚úÖ [SUCCESS] √Åudio salvo com sucesso em: {file_path}")

        return file_path

# --- Bloco de Teste ---
# Este bloco permite que voc√™ execute este arquivo diretamente para testar a grava√ß√£o.
async def test_recorder():
    """
    Fun√ß√£o para testar a classe AudioRecorder de forma independente.
    """
    recorder = AudioRecorder()
    try:
        saved_file = await recorder.record()
        print(f"\n[TEST RESULT] Arquivo de teste gerado: {saved_file}")
        # Verifica o tamanho do arquivo
        file_size = os.path.getsize(saved_file)
        print(f"[TEST RESULT] Tamanho do arquivo: {file_size / 1024:.2f} KB")
    except Exception as e:
        print(f"\n[TEST ERROR] Ocorreu um erro durante o teste: {e}")
        print("[TEST HINT] Verifique se voc√™ tem o 'PyAudio' instalado e as permiss√µes de microfone.")

if __name__ == "__main__":
    # Executa a fun√ß√£o de teste
    asyncio.run(test_recorder())